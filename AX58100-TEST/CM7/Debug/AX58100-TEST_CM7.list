
AX58100-TEST_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002884  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  08002b44  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  08002b44  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f9d5  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e53  00000000  00000000  0002fa13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007e8  00000000  00000000  00031868  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  00032050  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000372d0  00000000  00000000  00032770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008905  00000000  00000000  00069a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0016d3dc  00000000  00000000  00072345  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001df721  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001dfc  00000000  00000000  001df79c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002b04 	.word	0x08002b04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08002b04 	.word	0x08002b04

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <MX_DMA_Init+0x30>)
 8000414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <MX_DMA_Init+0x30>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_DMA_Init+0x30>)
 8000424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	58024400 	.word	0x58024400

08000440 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_GPIO_Init+0x50>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <MX_GPIO_Init+0x50>)
 800044e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_GPIO_Init+0x50>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <MX_GPIO_Init+0x50>)
 8000466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046a:	4a09      	ldr	r2, [pc, #36]	; (8000490 <MX_GPIO_Init+0x50>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_GPIO_Init+0x50>)
 8000476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	58024400 	.word	0x58024400

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800049a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800049e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004a0:	bf00      	nop
 80004a2:	4b21      	ldr	r3, [pc, #132]	; (8000528 <main+0x94>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d004      	beq.n	80004b8 <main+0x24>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dcf4      	bgt.n	80004a2 <main+0xe>
  if ( timeout < 0 )
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	da01      	bge.n	80004c2 <main+0x2e>
  {
  Error_Handler();
 80004be:	f000 f8ef 	bl	80006a0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 f95f 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f831 	bl	800052c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <main+0x94>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <main+0x94>)
 80004d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <main+0x94>)
 80004dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 facd 	bl	8000a88 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fae3 	bl	8000abc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004fc:	bf00      	nop
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <main+0x94>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000506:	2b00      	cmp	r3, #0
 8000508:	d104      	bne.n	8000514 <main+0x80>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	1e5a      	subs	r2, r3, #1
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	dcf4      	bgt.n	80004fe <main+0x6a>
if ( timeout < 0 )
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	da01      	bge.n	800051e <main+0x8a>
{
Error_Handler();
 800051a:	f000 f8c1 	bl	80006a0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f7ff ff8f 	bl	8000440 <MX_GPIO_Init>
  MX_DMA_Init();
 8000522:	f7ff ff73 	bl	800040c <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	e7fe      	b.n	8000526 <main+0x92>
 8000528:	58024400 	.word	0x58024400

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0cc      	sub	sp, #304	; 0x130
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000536:	224c      	movs	r2, #76	; 0x4c
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fada 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000544:	2220      	movs	r2, #32
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f002 fad3 	bl	8002af4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	4618      	mov	r0, r3
 8000554:	23bc      	movs	r3, #188	; 0xbc
 8000556:	461a      	mov	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f002 facb 	bl	8002af4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800055e:	2002      	movs	r0, #2
 8000560:	f000 fac0 	bl	8000ae4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	4b4b      	ldr	r3, [pc, #300]	; (8000698 <SystemClock_Config+0x16c>)
 800056c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056e:	4a4a      	ldr	r2, [pc, #296]	; (8000698 <SystemClock_Config+0x16c>)
 8000570:	f023 0301 	bic.w	r3, r3, #1
 8000574:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000576:	4b48      	ldr	r3, [pc, #288]	; (8000698 <SystemClock_Config+0x16c>)
 8000578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057a:	f003 0201 	and.w	r2, r3, #1
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	4b46      	ldr	r3, [pc, #280]	; (800069c <SystemClock_Config+0x170>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058a:	4a44      	ldr	r2, [pc, #272]	; (800069c <SystemClock_Config+0x170>)
 800058c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b42      	ldr	r3, [pc, #264]	; (800069c <SystemClock_Config+0x170>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005a2:	bf00      	nop
 80005a4:	4b3d      	ldr	r3, [pc, #244]	; (800069c <SystemClock_Config+0x170>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005b0:	d1f8      	bne.n	80005a4 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 12;
 80005d6:	230c      	movs	r3, #12
 80005d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005ee:	230c      	movs	r3, #12
 80005f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fac6 	bl	8000b98 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000612:	f000 f845 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	233f      	movs	r3, #63	; 0x3f
 8000618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2303      	movs	r3, #3
 800061e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000646:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f000 feb3 	bl	80013b8 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x130>
  {
    Error_Handler();
 8000658:	f000 f822 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_I2C1;
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	f242 0208 	movw	r2, #8200	; 0x2008
 8000664:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2200      	movs	r2, #0
 800066c:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2200      	movs	r2, #0
 8000674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4618      	mov	r0, r3
 800067e:	f001 f9c3 	bl	8001a08 <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x160>
  {
    Error_Handler();
 8000688:	f000 f80a 	bl	80006a0 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	58000400 	.word	0x58000400
 800069c:	58024800 	.word	0x58024800

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <Error_Handler+0x6>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_MspInit+0x30>)
 80006b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x30>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x30>)
 80006c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	58024400 	.word	0x58024400

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f89e 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000734:	f7ff fdd0 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000738:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800073a:	e003      	b.n	8000744 <LoopCopyDataInit>

0800073c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800073e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000740:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000742:	3104      	adds	r1, #4

08000744 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000744:	480a      	ldr	r0, [pc, #40]	; (8000770 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000748:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800074a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800074c:	d3f6      	bcc.n	800073c <CopyDataInit>
  ldr  r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000750:	e002      	b.n	8000758 <LoopFillZerobss>

08000752 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000752:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000754:	f842 3b04 	str.w	r3, [r2], #4

08000758 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800075a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800075c:	d3f9      	bcc.n	8000752 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800075e:	f002 f9a5 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000762:	f7ff fe97 	bl	8000494 <main>
  bx  lr    
 8000766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000768:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800076c:	08002b34 	.word	0x08002b34
  ldr  r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000774:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000778:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800077c:	20000030 	.word	0x20000030

08000780 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC3_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078a:	2003      	movs	r0, #3
 800078c:	f000 f94a 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000790:	f000 ffc8 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8000794:	4601      	mov	r1, r0
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_Init+0x68>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	f003 030f 	and.w	r3, r3, #15
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <HAL_Init+0x6c>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	fa21 f303 	lsr.w	r3, r1, r3
 80007ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_Init+0x68>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_Init+0x6c>)
 80007b8:	5cd3      	ldrb	r3, [r2, r3]
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	fa22 f303 	lsr.w	r3, r2, r3
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <HAL_Init+0x70>)
 80007c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <HAL_Init+0x74>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 f814 	bl	80007fc <HAL_InitTick>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e002      	b.n	80007e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007de:	f7ff ff63 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58024400 	.word	0x58024400
 80007f0:	08002b1c 	.word	0x08002b1c
 80007f4:	20000004 	.word	0x20000004
 80007f8:	20000000 	.word	0x20000000

080007fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_InitTick+0x60>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	e021      	b.n	8000854 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_InitTick+0x64>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_InitTick+0x60>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000822:	fbb2 f3f3 	udiv	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f921 	bl	8000a6e <HAL_SYSTICK_Config>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e00e      	b.n	8000854 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d80a      	bhi.n	8000852 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f000 f8f9 	bl	8000a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_InitTick+0x68>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000000c 	.word	0x2000000c
 8000860:	20000000 	.word	0x20000000
 8000864:	20000008 	.word	0x20000008

08000868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x20>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x24>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_IncTick+0x24>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	2000000c 	.word	0x2000000c
 800088c:	2000002c 	.word	0x2000002c

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	2000002c 	.word	0x2000002c

080008a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_GetREVID+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	0c1b      	lsrs	r3, r3, #16
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	5c001000 	.word	0x5c001000

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <__NVIC_SetPriorityGrouping+0x40>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	4313      	orrs	r3, r2
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	; (8000900 <__NVIC_SetPriorityGrouping+0x40>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00
 8000904:	05fa0000 	.word	0x05fa0000

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff47 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5e 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb2 	bl	80009e0 <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_HSEM_FastTake+0x2c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3320      	adds	r3, #32
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_HSEM_FastTake+0x30>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e000      	b.n	8000aa6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	58026400 	.word	0x58026400
 8000ab8:	80000300 	.word	0x80000300

08000abc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000ac6:	4906      	ldr	r1, [pc, #24]	; (8000ae0 <HAL_HSEM_Release+0x24>)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	58026400 	.word	0x58026400

08000ae4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_PWREx_ConfigSupply+0xb0>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	2b06      	cmp	r3, #6
 8000af6:	d00a      	beq.n	8000b0e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <HAL_PWREx_ConfigSupply+0xb0>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d001      	beq.n	8000b0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e040      	b.n	8000b8c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e03e      	b.n	8000b8c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000b16:	491f      	ldr	r1, [pc, #124]	; (8000b94 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000b1e:	f7ff feb7 	bl	8000890 <HAL_GetTick>
 8000b22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b24:	e009      	b.n	8000b3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000b26:	f7ff feb3 	bl	8000890 <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b34:	d901      	bls.n	8000b3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e028      	b.n	8000b8c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b46:	d1ee      	bne.n	8000b26 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b1e      	cmp	r3, #30
 8000b4c:	d008      	beq.n	8000b60 <HAL_PWREx_ConfigSupply+0x7c>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b2e      	cmp	r3, #46	; 0x2e
 8000b52:	d005      	beq.n	8000b60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b1d      	cmp	r3, #29
 8000b58:	d002      	beq.n	8000b60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b2d      	cmp	r3, #45	; 0x2d
 8000b5e:	d114      	bne.n	8000b8a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000b60:	f7ff fe96 	bl	8000890 <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000b66:	e009      	b.n	8000b7c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000b68:	f7ff fe92 	bl	8000890 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b76:	d901      	bls.n	8000b7c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e007      	b.n	8000b8c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_PWREx_ConfigSupply+0xb0>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d1ee      	bne.n	8000b68 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024800 	.word	0x58024800

08000b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e3ff      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8087 	beq.w	8000cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bb8:	4b99      	ldr	r3, [pc, #612]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000bc2:	4b97      	ldr	r3, [pc, #604]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bca:	2b10      	cmp	r3, #16
 8000bcc:	d007      	beq.n	8000bde <HAL_RCC_OscConfig+0x46>
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	2b18      	cmp	r3, #24
 8000bd2:	d110      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x5e>
 8000bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bde:	4b90      	ldr	r3, [pc, #576]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d06c      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x12c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d168      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e3d9      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfe:	d106      	bne.n	8000c0e <HAL_RCC_OscConfig+0x76>
 8000c00:	4b87      	ldr	r3, [pc, #540]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a86      	ldr	r2, [pc, #536]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e02e      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10c      	bne.n	8000c30 <HAL_RCC_OscConfig+0x98>
 8000c16:	4b82      	ldr	r3, [pc, #520]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a81      	ldr	r2, [pc, #516]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	4b7f      	ldr	r3, [pc, #508]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a7e      	ldr	r2, [pc, #504]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e01d      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0xbc>
 8000c3a:	4b79      	ldr	r3, [pc, #484]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a78      	ldr	r2, [pc, #480]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b76      	ldr	r3, [pc, #472]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a75      	ldr	r2, [pc, #468]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e00b      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c54:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a71      	ldr	r2, [pc, #452]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a6e      	ldr	r2, [pc, #440]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d013      	beq.n	8000c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c74:	f7ff fe0c 	bl	8000890 <HAL_GetTick>
 8000c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c7c:	f7ff fe08 	bl	8000890 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b64      	cmp	r3, #100	; 0x64
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e38d      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c8e:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0xe4>
 8000c9a:	e014      	b.n	8000cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fdf8 	bl	8000890 <HAL_GetTick>
 8000ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fdf4 	bl	8000890 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e379      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000cb6:	4b5a      	ldr	r3, [pc, #360]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x10c>
 8000cc2:	e000      	b.n	8000cc6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80ae 	beq.w	8000e30 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cd4:	4b52      	ldr	r3, [pc, #328]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000cdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cde:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <HAL_RCC_OscConfig+0x162>
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	2b18      	cmp	r3, #24
 8000cee:	d13a      	bne.n	8000d66 <HAL_RCC_OscConfig+0x1ce>
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d135      	bne.n	8000d66 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cfa:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d005      	beq.n	8000d12 <HAL_RCC_OscConfig+0x17a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e34b      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d12:	f7ff fdc9 	bl	80008a8 <HAL_GetREVID>
 8000d16:	4602      	mov	r2, r0
 8000d18:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d817      	bhi.n	8000d50 <HAL_RCC_OscConfig+0x1b8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b40      	cmp	r3, #64	; 0x40
 8000d26:	d108      	bne.n	8000d3a <HAL_RCC_OscConfig+0x1a2>
 8000d28:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000d30:	4a3b      	ldr	r2, [pc, #236]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d36:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d38:	e07a      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	031b      	lsls	r3, r3, #12
 8000d48:	4935      	ldr	r1, [pc, #212]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d4e:	e06f      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d50:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	061b      	lsls	r3, r3, #24
 8000d5e:	4930      	ldr	r1, [pc, #192]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d64:	e064      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d045      	beq.n	8000dfa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 0219 	bic.w	r2, r3, #25
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4929      	ldr	r1, [pc, #164]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d80:	f7ff fd86 	bl	8000890 <HAL_GetTick>
 8000d84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d88:	f7ff fd82 	bl	8000890 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e307      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f0      	beq.n	8000d88 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da6:	f7ff fd7f 	bl	80008a8 <HAL_GetREVID>
 8000daa:	4602      	mov	r2, r0
 8000dac:	f241 0303 	movw	r3, #4099	; 0x1003
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d817      	bhi.n	8000de4 <HAL_RCC_OscConfig+0x24c>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	2b40      	cmp	r3, #64	; 0x40
 8000dba:	d108      	bne.n	8000dce <HAL_RCC_OscConfig+0x236>
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dca:	6053      	str	r3, [r2, #4]
 8000dcc:	e030      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	031b      	lsls	r3, r3, #12
 8000ddc:	4910      	ldr	r1, [pc, #64]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
 8000de2:	e025      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	061b      	lsls	r3, r3, #24
 8000df2:	490b      	ldr	r1, [pc, #44]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]
 8000df8:	e01a      	b.n	8000e30 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_RCC_OscConfig+0x288>)
 8000e00:	f023 0301 	bic.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e06:	f7ff fd43 	bl	8000890 <HAL_GetTick>
 8000e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e0c:	e00a      	b.n	8000e24 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fd3f 	bl	8000890 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d903      	bls.n	8000e24 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e2c4      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
 8000e20:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e24:	4ba4      	ldr	r3, [pc, #656]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1ee      	bne.n	8000e0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a9 	beq.w	8000f90 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e48:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d007      	beq.n	8000e64 <HAL_RCC_OscConfig+0x2cc>
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	2b18      	cmp	r3, #24
 8000e58:	d13a      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x338>
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d135      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000e64:	4b94      	ldr	r3, [pc, #592]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <HAL_RCC_OscConfig+0x2e4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	2b80      	cmp	r3, #128	; 0x80
 8000e76:	d001      	beq.n	8000e7c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e296      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e7c:	f7ff fd14 	bl	80008a8 <HAL_GetREVID>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f241 0303 	movw	r3, #4099	; 0x1003
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d817      	bhi.n	8000eba <HAL_RCC_OscConfig+0x322>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	2b20      	cmp	r3, #32
 8000e90:	d108      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x30c>
 8000e92:	4b89      	ldr	r3, [pc, #548]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000e9a:	4a87      	ldr	r2, [pc, #540]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ea0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ea2:	e075      	b.n	8000f90 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ea4:	4b84      	ldr	r3, [pc, #528]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	069b      	lsls	r3, r3, #26
 8000eb2:	4981      	ldr	r1, [pc, #516]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000eb8:	e06a      	b.n	8000f90 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000eba:	4b7f      	ldr	r3, [pc, #508]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	061b      	lsls	r3, r3, #24
 8000ec8:	497b      	ldr	r1, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000ece:	e05f      	b.n	8000f90 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d042      	beq.n	8000f5e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000ed8:	4b77      	ldr	r3, [pc, #476]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a76      	ldr	r2, [pc, #472]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fcd4 	bl	8000890 <HAL_GetTick>
 8000ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000eec:	f7ff fcd0 	bl	8000890 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e255      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000efe:	4b6e      	ldr	r3, [pc, #440]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f0a:	f7ff fccd 	bl	80008a8 <HAL_GetREVID>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f241 0303 	movw	r3, #4099	; 0x1003
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d817      	bhi.n	8000f48 <HAL_RCC_OscConfig+0x3b0>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	2b20      	cmp	r3, #32
 8000f1e:	d108      	bne.n	8000f32 <HAL_RCC_OscConfig+0x39a>
 8000f20:	4b65      	ldr	r3, [pc, #404]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000f28:	4a63      	ldr	r2, [pc, #396]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f2e:	6053      	str	r3, [r2, #4]
 8000f30:	e02e      	b.n	8000f90 <HAL_RCC_OscConfig+0x3f8>
 8000f32:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	069b      	lsls	r3, r3, #26
 8000f40:	495d      	ldr	r1, [pc, #372]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	604b      	str	r3, [r1, #4]
 8000f46:	e023      	b.n	8000f90 <HAL_RCC_OscConfig+0x3f8>
 8000f48:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4958      	ldr	r1, [pc, #352]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	60cb      	str	r3, [r1, #12]
 8000f5c:	e018      	b.n	8000f90 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000f5e:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a55      	ldr	r2, [pc, #340]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fc91 	bl	8000890 <HAL_GetTick>
 8000f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000f72:	f7ff fc8d 	bl	8000890 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e212      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000f84:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d036      	beq.n	800100a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d019      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa4:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa8:	4a43      	ldr	r2, [pc, #268]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fc6e 	bl	8000890 <HAL_GetTick>
 8000fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fc6a 	bl	8000890 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e1ef      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x420>
 8000fd6:	e018      	b.n	800100a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd8:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fdc:	4a36      	ldr	r2, [pc, #216]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8000fde:	f023 0301 	bic.w	r3, r3, #1
 8000fe2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fc54 	bl	8000890 <HAL_GetTick>
 8000fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc50 	bl	8000890 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e1d5      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8001000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	2b00      	cmp	r3, #0
 8001014:	d036      	beq.n	8001084 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d019      	beq.n	8001052 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001028:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800102a:	f7ff fc31 	bl	8000890 <HAL_GetTick>
 800102e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001032:	f7ff fc2d 	bl	8000890 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e1b2      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x49a>
 8001050:	e018      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 8001058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800105c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800105e:	f7ff fc17 	bl	8000890 <HAL_GetTick>
 8001062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001066:	f7ff fc13 	bl	8000890 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e198      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_RCC_OscConfig+0x520>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f0      	bne.n	8001066 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8085 	beq.w	800119c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_RCC_OscConfig+0x524>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_RCC_OscConfig+0x524>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800109e:	f7ff fbf7 	bl	8000890 <HAL_GetTick>
 80010a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80010a4:	e00c      	b.n	80010c0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010a6:	f7ff fbf3 	bl	8000890 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d905      	bls.n	80010c0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e178      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
 80010b8:	58024400 	.word	0x58024400
 80010bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80010c0:	4b96      	ldr	r3, [pc, #600]	; (800131c <HAL_RCC_OscConfig+0x784>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0ec      	beq.n	80010a6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x54a>
 80010d4:	4b92      	ldr	r3, [pc, #584]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80010d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d8:	4a91      	ldr	r2, [pc, #580]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6713      	str	r3, [r2, #112]	; 0x70
 80010e0:	e02d      	b.n	800113e <HAL_RCC_OscConfig+0x5a6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x56c>
 80010ea:	4b8d      	ldr	r3, [pc, #564]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80010ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ee:	4a8c      	ldr	r2, [pc, #560]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6713      	str	r3, [r2, #112]	; 0x70
 80010f6:	4b8a      	ldr	r3, [pc, #552]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80010f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010fa:	4a89      	ldr	r2, [pc, #548]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6713      	str	r3, [r2, #112]	; 0x70
 8001102:	e01c      	b.n	800113e <HAL_RCC_OscConfig+0x5a6>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0x58e>
 800110c:	4b84      	ldr	r3, [pc, #528]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800110e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001110:	4a83      	ldr	r2, [pc, #524]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6713      	str	r3, [r2, #112]	; 0x70
 8001118:	4b81      	ldr	r3, [pc, #516]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800111a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111c:	4a80      	ldr	r2, [pc, #512]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6713      	str	r3, [r2, #112]	; 0x70
 8001124:	e00b      	b.n	800113e <HAL_RCC_OscConfig+0x5a6>
 8001126:	4b7e      	ldr	r3, [pc, #504]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112a:	4a7d      	ldr	r2, [pc, #500]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6713      	str	r3, [r2, #112]	; 0x70
 8001132:	4b7b      	ldr	r3, [pc, #492]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001136:	4a7a      	ldr	r2, [pc, #488]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d015      	beq.n	8001172 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001146:	f7ff fba3 	bl	8000890 <HAL_GetTick>
 800114a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800114c:	e00a      	b.n	8001164 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f7ff fb9f 	bl	8000890 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	f241 3288 	movw	r2, #5000	; 0x1388
 800115c:	4293      	cmp	r3, r2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e122      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001164:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0ee      	beq.n	800114e <HAL_RCC_OscConfig+0x5b6>
 8001170:	e014      	b.n	800119c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff fb8d 	bl	8000890 <HAL_GetTick>
 8001176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001178:	e00a      	b.n	8001190 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f7ff fb89 	bl	8000890 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f241 3288 	movw	r2, #5000	; 0x1388
 8001188:	4293      	cmp	r3, r2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e10c      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001190:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1ee      	bne.n	800117a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8101 	beq.w	80013a8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80011a6:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011ae:	2b18      	cmp	r3, #24
 80011b0:	f000 80bc 	beq.w	800132c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	f040 8095 	bne.w	80012e8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011be:	4b58      	ldr	r3, [pc, #352]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80011c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fb61 	bl	8000890 <HAL_GetTick>
 80011ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff fb5d 	bl	8000890 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0e2      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80011e4:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f0:	4b4b      	ldr	r3, [pc, #300]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80011f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <HAL_RCC_OscConfig+0x78c>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	430a      	orrs	r2, r1
 8001204:	4946      	ldr	r1, [pc, #280]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001206:	4313      	orrs	r3, r2
 8001208:	628b      	str	r3, [r1, #40]	; 0x28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	3b01      	subs	r3, #1
 8001210:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001218:	3b01      	subs	r3, #1
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	b29b      	uxth	r3, r3
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001224:	3b01      	subs	r3, #1
 8001226:	041b      	lsls	r3, r3, #16
 8001228:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001232:	3b01      	subs	r3, #1
 8001234:	061b      	lsls	r3, r3, #24
 8001236:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800123a:	4939      	ldr	r1, [pc, #228]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800123c:	4313      	orrs	r3, r2
 800123e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	4a36      	ldr	r2, [pc, #216]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800124e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <HAL_RCC_OscConfig+0x790>)
 8001252:	4013      	ands	r3, r2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001258:	00d2      	lsls	r2, r2, #3
 800125a:	4931      	ldr	r1, [pc, #196]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800125c:	4313      	orrs	r3, r2
 800125e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	f023 020c 	bic.w	r2, r3, #12
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	492c      	ldr	r1, [pc, #176]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800126e:	4313      	orrs	r3, r2
 8001270:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	f023 0202 	bic.w	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4928      	ldr	r1, [pc, #160]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001280:	4313      	orrs	r3, r2
 8001282:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	4a25      	ldr	r2, [pc, #148]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 800129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fae6 	bl	8000890 <HAL_GetTick>
 80012c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fae2 	bl	8000890 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e067      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x730>
 80012e6:	e05f      	b.n	80013a8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 80012ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff facc 	bl	8000890 <HAL_GetTick>
 80012f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fac8 	bl	8000890 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e04d      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_RCC_OscConfig+0x788>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x764>
 800131a:	e045      	b.n	80013a8 <HAL_RCC_OscConfig+0x810>
 800131c:	58024800 	.word	0x58024800
 8001320:	58024400 	.word	0x58024400
 8001324:	fffffc0c 	.word	0xfffffc0c
 8001328:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_RCC_OscConfig+0x81c>)
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_RCC_OscConfig+0x81c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	2b01      	cmp	r3, #1
 800133e:	d031      	beq.n	80013a4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	f003 0203 	and.w	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800134a:	429a      	cmp	r2, r3
 800134c:	d12a      	bne.n	80013a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d122      	bne.n	80013a4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d11a      	bne.n	80013a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	0a5b      	lsrs	r3, r3, #9
 8001372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d111      	bne.n	80013a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800138e:	429a      	cmp	r2, r3
 8001390:	d108      	bne.n	80013a4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	0e1b      	lsrs	r3, r3, #24
 8001396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58024400 	.word	0x58024400

080013b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e19c      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013cc:	4b8a      	ldr	r3, [pc, #552]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d910      	bls.n	80013fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	4b87      	ldr	r3, [pc, #540]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 020f 	bic.w	r2, r3, #15
 80013e2:	4985      	ldr	r1, [pc, #532]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ea:	4b83      	ldr	r3, [pc, #524]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e184      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d010      	beq.n	800142a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	4b7b      	ldr	r3, [pc, #492]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001414:	429a      	cmp	r2, r3
 8001416:	d908      	bls.n	800142a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001418:	4b78      	ldr	r3, [pc, #480]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	4975      	ldr	r1, [pc, #468]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001426:	4313      	orrs	r3, r2
 8001428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d010      	beq.n	8001458 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	4b70      	ldr	r3, [pc, #448]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001442:	429a      	cmp	r2, r3
 8001444:	d908      	bls.n	8001458 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001446:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	496a      	ldr	r1, [pc, #424]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001454:	4313      	orrs	r3, r2
 8001456:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d010      	beq.n	8001486 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699a      	ldr	r2, [r3, #24]
 8001468:	4b64      	ldr	r3, [pc, #400]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001470:	429a      	cmp	r2, r3
 8001472:	d908      	bls.n	8001486 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001474:	4b61      	ldr	r3, [pc, #388]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	495e      	ldr	r1, [pc, #376]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001482:	4313      	orrs	r3, r2
 8001484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d010      	beq.n	80014b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69da      	ldr	r2, [r3, #28]
 8001496:	4b59      	ldr	r3, [pc, #356]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800149e:	429a      	cmp	r2, r3
 80014a0:	d908      	bls.n	80014b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80014a2:	4b56      	ldr	r3, [pc, #344]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4953      	ldr	r1, [pc, #332]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d908      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f023 020f 	bic.w	r2, r3, #15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4947      	ldr	r1, [pc, #284]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d055      	beq.n	800159a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80014ee:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4940      	ldr	r1, [pc, #256]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d107      	bne.n	8001518 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001508:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d121      	bne.n	8001558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0f6      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d107      	bne.n	8001530 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001520:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d115      	bne.n	8001558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0ea      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0de      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0d6      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	f023 0207 	bic.w	r2, r3, #7
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4925      	ldr	r1, [pc, #148]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 8001566:	4313      	orrs	r3, r2
 8001568:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff f991 	bl	8000890 <HAL_GetTick>
 800156e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001570:	e00a      	b.n	8001588 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001572:	f7ff f98d 	bl	8000890 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e0be      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	429a      	cmp	r2, r3
 8001598:	d1eb      	bne.n	8001572 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d010      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d208      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f023 020f 	bic.w	r2, r3, #15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <HAL_RCC_ClockConfig+0x244>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d214      	bcs.n	8001600 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 020f 	bic.w	r2, r3, #15
 80015de:	4906      	ldr	r1, [pc, #24]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_RCC_ClockConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e086      	b.n	8001706 <HAL_RCC_ClockConfig+0x34e>
 80015f8:	52002000 	.word	0x52002000
 80015fc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d010      	beq.n	800162e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001618:	429a      	cmp	r2, r3
 800161a:	d208      	bcs.n	800162e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800161c:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	4939      	ldr	r1, [pc, #228]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 800162a:	4313      	orrs	r3, r2
 800162c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d010      	beq.n	800165c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001646:	429a      	cmp	r2, r3
 8001648:	d208      	bcs.n	800165c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	492e      	ldr	r1, [pc, #184]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 8001658:	4313      	orrs	r3, r2
 800165a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d010      	beq.n	800168a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001674:	429a      	cmp	r2, r3
 8001676:	d208      	bcs.n	800168a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 8001686:	4313      	orrs	r3, r2
 8001688:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d208      	bcs.n	80016b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4917      	ldr	r1, [pc, #92]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b8:	f000 f834 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016bc:	4601      	mov	r1, r0
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x35c>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	fa21 f303 	lsr.w	r3, r1, r3
 80016d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x358>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <HAL_RCC_ClockConfig+0x35c>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x360>)
 80016ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_RCC_ClockConfig+0x364>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x368>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f87e 	bl	80007fc <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	58024400 	.word	0x58024400
 8001714:	08002b1c 	.word	0x08002b1c
 8001718:	20000004 	.word	0x20000004
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800172a:	4baf      	ldr	r3, [pc, #700]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001732:	2b18      	cmp	r3, #24
 8001734:	f200 814e 	bhi.w	80019d4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_RCC_GetSysClockFreq+0x1c>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	080017a5 	.word	0x080017a5
 8001744:	080019d5 	.word	0x080019d5
 8001748:	080019d5 	.word	0x080019d5
 800174c:	080019d5 	.word	0x080019d5
 8001750:	080019d5 	.word	0x080019d5
 8001754:	080019d5 	.word	0x080019d5
 8001758:	080019d5 	.word	0x080019d5
 800175c:	080019d5 	.word	0x080019d5
 8001760:	080017cb 	.word	0x080017cb
 8001764:	080019d5 	.word	0x080019d5
 8001768:	080019d5 	.word	0x080019d5
 800176c:	080019d5 	.word	0x080019d5
 8001770:	080019d5 	.word	0x080019d5
 8001774:	080019d5 	.word	0x080019d5
 8001778:	080019d5 	.word	0x080019d5
 800177c:	080019d5 	.word	0x080019d5
 8001780:	080017d1 	.word	0x080017d1
 8001784:	080019d5 	.word	0x080019d5
 8001788:	080019d5 	.word	0x080019d5
 800178c:	080019d5 	.word	0x080019d5
 8001790:	080019d5 	.word	0x080019d5
 8001794:	080019d5 	.word	0x080019d5
 8001798:	080019d5 	.word	0x080019d5
 800179c:	080019d5 	.word	0x080019d5
 80017a0:	080017d7 	.word	0x080017d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0320 	and.w	r3, r3, #32
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80017b0:	4b8d      	ldr	r3, [pc, #564]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	4a8c      	ldr	r2, [pc, #560]	; (80019ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80017c2:	e10a      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80017c4:	4b89      	ldr	r3, [pc, #548]	; (80019ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 80017c6:	61bb      	str	r3, [r7, #24]
    break;
 80017c8:	e107      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80017ca:	4b89      	ldr	r3, [pc, #548]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80017cc:	61bb      	str	r3, [r7, #24]
    break;
 80017ce:	e104      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80017d0:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80017d2:	61bb      	str	r3, [r7, #24]
    break;
 80017d4:	e101      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80017d6:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80017e0:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80017ec:	4b7e      	ldr	r3, [pc, #504]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80017f6:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80da 	beq.w	80019ce <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d05a      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8001820:	2b01      	cmp	r3, #1
 8001822:	d302      	bcc.n	800182a <HAL_RCC_GetSysClockFreq+0x106>
 8001824:	2b02      	cmp	r3, #2
 8001826:	d078      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x1f6>
 8001828:	e099      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02d      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001836:	4b6c      	ldr	r3, [pc, #432]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	4a6a      	ldr	r2, [pc, #424]	; (80019ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001870:	ed97 6a02 	vldr	s12, [r7, #8]
 8001874:	eddf 5a60 	vldr	s11, [pc, #384]	; 80019f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800187c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001890:	e087      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80019fc <HAL_RCC_GetSysClockFreq+0x2d8>
 80018a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80018b8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80019f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80018bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80018d4:	e065      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001a00 <HAL_RCC_GetSysClockFreq+0x2dc>
 80018e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80018fc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80019f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800190c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001918:	e043      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001924:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001a04 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800193c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001940:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80019f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800194c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800195c:	e021      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001968:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001a00 <HAL_RCC_GetSysClockFreq+0x2dc>
 800196c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001980:	ed97 6a02 	vldr	s12, [r7, #8]
 8001984:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80019f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800198c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80019a0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	0a5b      	lsrs	r3, r3, #9
 80019a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ac:	3301      	adds	r3, #1
 80019ae:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80019be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c6:	ee17 3a90 	vmov	r3, s15
 80019ca:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80019cc:	e005      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
    break;
 80019d2:	e002      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80019d6:	61bb      	str	r3, [r7, #24]
    break;
 80019d8:	bf00      	nop
  }

  return sysclockfreq;
 80019da:	69bb      	ldr	r3, [r7, #24]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3724      	adds	r7, #36	; 0x24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	58024400 	.word	0x58024400
 80019ec:	03d09000 	.word	0x03d09000
 80019f0:	003d0900 	.word	0x003d0900
 80019f4:	017d7840 	.word	0x017d7840
 80019f8:	46000000 	.word	0x46000000
 80019fc:	4c742400 	.word	0x4c742400
 8001a00:	4a742400 	.word	0x4a742400
 8001a04:	4bbebc20 	.word	0x4bbebc20

08001a08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a10:	2300      	movs	r3, #0
 8001a12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a14:	2300      	movs	r3, #0
 8001a16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03d      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a2c:	d013      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a32:	d802      	bhi.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001a38:	e01f      	b.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001a40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001a44:	d01c      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001a46:	e018      	b.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a48:	4baf      	ldr	r3, [pc, #700]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	4aae      	ldr	r2, [pc, #696]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001a54:	e015      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fec1 	bl	80027e4 <RCCEx_PLL2_Config>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001a66:	e00c      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3324      	adds	r3, #36	; 0x24
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 ff6a 	bl	8002948 <RCCEx_PLL3_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8001a78:	e003      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8001a7e:	e000      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001a88:	4b9f      	ldr	r3, [pc, #636]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a94:	499c      	ldr	r1, [pc, #624]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	650b      	str	r3, [r1, #80]	; 0x50
 8001a9a:	e001      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d03d      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d826      	bhi.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001ab4:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8001ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aba:	bf00      	nop
 8001abc:	08001ad1 	.word	0x08001ad1
 8001ac0:	08001adf 	.word	0x08001adf
 8001ac4:	08001af1 	.word	0x08001af1
 8001ac8:	08001b09 	.word	0x08001b09
 8001acc:	08001b09 	.word	0x08001b09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ad0:	4b8d      	ldr	r3, [pc, #564]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	4a8c      	ldr	r2, [pc, #560]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001adc:	e015      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fe7d 	bl	80027e4 <RCCEx_PLL2_Config>
 8001aea:	4603      	mov	r3, r0
 8001aec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001aee:	e00c      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3324      	adds	r3, #36	; 0x24
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 ff26 	bl	8002948 <RCCEx_PLL3_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001b00:	e003      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]
      break;
 8001b06:	e000      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8001b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b10:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b14:	f023 0207 	bic.w	r2, r3, #7
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	497a      	ldr	r1, [pc, #488]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	650b      	str	r3, [r1, #80]	; 0x50
 8001b22:	e001      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d03e      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	2b80      	cmp	r3, #128	; 0x80
 8001b3a:	d01c      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8001b3c:	2b80      	cmp	r3, #128	; 0x80
 8001b3e:	d804      	bhi.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001b44:	2b40      	cmp	r3, #64	; 0x40
 8001b46:	d00d      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8001b48:	e01e      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8001b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8001b4c:	d01f      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b52:	d01e      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001b54:	e018      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b56:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	4a6b      	ldr	r2, [pc, #428]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001b62:	e017      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fe3a 	bl	80027e4 <RCCEx_PLL2_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001b74:	e00e      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3324      	adds	r3, #36	; 0x24
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fee3 	bl	8002948 <RCCEx_PLL3_Config>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8001b86:	e005      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b8c:	e002      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8001b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001b9a:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	4958      	ldr	r1, [pc, #352]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	650b      	str	r3, [r1, #80]	; 0x50
 8001bac:	e001      	b.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d044      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc8:	d01f      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8001bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bce:	d805      	bhi.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8001bda:	e01f      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8001bdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001be0:	d01f      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8001be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001be6:	d01e      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001be8:	e018      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	4a46      	ldr	r2, [pc, #280]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001bf6:	e017      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fdf0 	bl	80027e4 <RCCEx_PLL2_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001c08:	e00e      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3324      	adds	r3, #36	; 0x24
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fe99 	bl	8002948 <RCCEx_PLL3_Config>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001c1a:	e005      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8001c20:	e002      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8001c22:	bf00      	nop
 8001c24:	e000      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8001c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10a      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c3c:	4932      	ldr	r1, [pc, #200]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	658b      	str	r3, [r1, #88]	; 0x58
 8001c42:	e001      	b.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d044      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c5e:	d01f      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8001c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c64:	d805      	bhi.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8001c6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c6e:	d00e      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8001c70:	e01f      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8001c72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c76:	d01f      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c7c:	d01e      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8001c7e:	e018      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	4a20      	ldr	r2, [pc, #128]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001c8c:	e017      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fda5 	bl	80027e4 <RCCEx_PLL2_Config>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8001c9e:	e00e      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3324      	adds	r3, #36	; 0x24
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fe4e 	bl	8002948 <RCCEx_PLL3_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001cb0:	e005      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8001cb6:	e002      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8001cb8:	bf00      	nop
 8001cba:	e000      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8001cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10a      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001cd2:	490d      	ldr	r1, [pc, #52]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	658b      	str	r3, [r1, #88]	; 0x58
 8001cd8:	e001      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d035      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d00c      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d802      	bhi.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01b      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8001cfa:	e017      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8001d00:	2b30      	cmp	r3, #48	; 0x30
 8001d02:	d018      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8001d04:	e012      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8001d06:	bf00      	nop
 8001d08:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d0c:	4baf      	ldr	r3, [pc, #700]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	4aae      	ldr	r2, [pc, #696]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001d18:	e00e      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fd5f 	bl	80027e4 <RCCEx_PLL2_Config>
 8001d26:	4603      	mov	r3, r0
 8001d28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8001d2a:	e005      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d30:	e002      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8001d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001d3e:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4a:	49a0      	ldr	r1, [pc, #640]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001d50:	e001      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d042      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d6a:	d01f      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8001d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d70:	d805      	bhi.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d00e      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8001d7c:	e01f      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8001d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d82:	d01f      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8001d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d88:	d01e      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8001d8a:	e018      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d8c:	4b8f      	ldr	r3, [pc, #572]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	4a8e      	ldr	r2, [pc, #568]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001d98:	e017      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fd1f 	bl	80027e4 <RCCEx_PLL2_Config>
 8001da6:	4603      	mov	r3, r0
 8001da8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001daa:	e00e      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3324      	adds	r3, #36	; 0x24
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fdc8 	bl	8002948 <RCCEx_PLL3_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8001dbc:	e005      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8001dc4:	bf00      	nop
 8001dc6:	e000      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8001dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001dd0:	4b7e      	ldr	r3, [pc, #504]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	497b      	ldr	r1, [pc, #492]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	650b      	str	r3, [r1, #80]	; 0x50
 8001de2:	e001      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d042      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dfc:	d01b      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e02:	d805      	bhi.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d022      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d00a      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8001e0e:	e01b      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8001e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e14:	d01d      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8001e16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1a:	d01c      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8001e1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e20:	d01b      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8001e22:	e011      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3304      	adds	r3, #4
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fcda 	bl	80027e4 <RCCEx_PLL2_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8001e34:	e012      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3324      	adds	r3, #36	; 0x24
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fd83 	bl	8002948 <RCCEx_PLL3_Config>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8001e46:	e009      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8001e4c:	e006      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001e4e:	bf00      	nop
 8001e50:	e004      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001e52:	bf00      	nop
 8001e54:	e002      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001e56:	bf00      	nop
 8001e58:	e000      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8001e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001e62:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	4957      	ldr	r1, [pc, #348]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	650b      	str	r3, [r1, #80]	; 0x50
 8001e74:	e001      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d044      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e90:	d01b      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8001e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e96:	d805      	bhi.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d022      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001ea2:	e01b      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8001eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eae:	d01c      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8001eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001eb4:	d01b      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8001eb6:	e011      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fc90 	bl	80027e4 <RCCEx_PLL2_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8001ec8:	e012      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3324      	adds	r3, #36	; 0x24
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fd39 	bl	8002948 <RCCEx_PLL3_Config>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8001eda:	e009      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]
      break;
 8001ee0:	e006      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001ee2:	bf00      	nop
 8001ee4:	e004      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001ee6:	bf00      	nop
 8001ee8:	e002      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001eea:	bf00      	nop
 8001eec:	e000      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8001eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001ef6:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f04:	4931      	ldr	r1, [pc, #196]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	658b      	str	r3, [r1, #88]	; 0x58
 8001f0a:	e001      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d02d      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f24:	d005      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8001f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f2a:	d009      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8001f30:	e00f      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8001f3e:	e00c      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	2101      	movs	r1, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc4c 	bl	80027e4 <RCCEx_PLL2_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8001f50:	e003      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
      break;
 8001f56:	e000      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8001f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f6c:	4917      	ldr	r1, [pc, #92]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	650b      	str	r3, [r1, #80]	; 0x50
 8001f72:	e001      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d035      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d81b      	bhi.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fd1 	.word	0x08001fd1
 8001f98:	08001fa5 	.word	0x08001fa5
 8001f9c:	08001fb3 	.word	0x08001fb3
 8001fa0:	08001fd1 	.word	0x08001fd1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8001faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8001fb0:	e00f      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fc13 	bl	80027e4 <RCCEx_PLL2_Config>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8001fc2:	e006      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8001fc8:	e003      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8001fca:	bf00      	nop
 8001fcc:	58024400 	.word	0x58024400
      break;
 8001fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001fd8:	4bba      	ldr	r3, [pc, #744]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	f023 0203 	bic.w	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	49b7      	ldr	r1, [pc, #732]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001fea:	e001      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8086 	beq.w	800210a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffe:	4bb2      	ldr	r3, [pc, #712]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4ab1      	ldr	r2, [pc, #708]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800200a:	f7fe fc41 	bl	8000890 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002010:	e009      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7fe fc3d 	bl	8000890 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d902      	bls.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	75fb      	strb	r3, [r7, #23]
        break;
 8002024:	e005      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002026:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ef      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d166      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002038:	4ba2      	ldr	r3, [pc, #648]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800203a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002042:	4053      	eors	r3, r2
 8002044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800204c:	4b9d      	ldr	r3, [pc, #628]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002054:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002056:	4b9b      	ldr	r3, [pc, #620]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a9a      	ldr	r2, [pc, #616]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002062:	4b98      	ldr	r3, [pc, #608]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a97      	ldr	r2, [pc, #604]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800206e:	4a95      	ldr	r2, [pc, #596]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800207a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207e:	d115      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fc06 	bl	8000890 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002086:	e00b      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7fe fc02 	bl	8000890 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d902      	bls.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	75fb      	strb	r3, [r7, #23]
            break;
 800209e:	e005      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ed      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d126      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020c0:	d10d      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80020c2:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020d0:	0919      	lsrs	r1, r3, #4
 80020d2:	4b7e      	ldr	r3, [pc, #504]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	497b      	ldr	r1, [pc, #492]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	610b      	str	r3, [r1, #16]
 80020dc:	e005      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80020de:	4b79      	ldr	r3, [pc, #484]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	4a78      	ldr	r2, [pc, #480]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020e8:	6113      	str	r3, [r2, #16]
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f8:	4972      	ldr	r1, [pc, #456]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	670b      	str	r3, [r1, #112]	; 0x70
 80020fe:	e004      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	75bb      	strb	r3, [r7, #22]
 8002104:	e001      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d07d      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800211a:	2b28      	cmp	r3, #40	; 0x28
 800211c:	d866      	bhi.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	080021f3 	.word	0x080021f3
 8002128:	080021ed 	.word	0x080021ed
 800212c:	080021ed 	.word	0x080021ed
 8002130:	080021ed 	.word	0x080021ed
 8002134:	080021ed 	.word	0x080021ed
 8002138:	080021ed 	.word	0x080021ed
 800213c:	080021ed 	.word	0x080021ed
 8002140:	080021ed 	.word	0x080021ed
 8002144:	080021c9 	.word	0x080021c9
 8002148:	080021ed 	.word	0x080021ed
 800214c:	080021ed 	.word	0x080021ed
 8002150:	080021ed 	.word	0x080021ed
 8002154:	080021ed 	.word	0x080021ed
 8002158:	080021ed 	.word	0x080021ed
 800215c:	080021ed 	.word	0x080021ed
 8002160:	080021ed 	.word	0x080021ed
 8002164:	080021db 	.word	0x080021db
 8002168:	080021ed 	.word	0x080021ed
 800216c:	080021ed 	.word	0x080021ed
 8002170:	080021ed 	.word	0x080021ed
 8002174:	080021ed 	.word	0x080021ed
 8002178:	080021ed 	.word	0x080021ed
 800217c:	080021ed 	.word	0x080021ed
 8002180:	080021ed 	.word	0x080021ed
 8002184:	080021f3 	.word	0x080021f3
 8002188:	080021ed 	.word	0x080021ed
 800218c:	080021ed 	.word	0x080021ed
 8002190:	080021ed 	.word	0x080021ed
 8002194:	080021ed 	.word	0x080021ed
 8002198:	080021ed 	.word	0x080021ed
 800219c:	080021ed 	.word	0x080021ed
 80021a0:	080021ed 	.word	0x080021ed
 80021a4:	080021f3 	.word	0x080021f3
 80021a8:	080021ed 	.word	0x080021ed
 80021ac:	080021ed 	.word	0x080021ed
 80021b0:	080021ed 	.word	0x080021ed
 80021b4:	080021ed 	.word	0x080021ed
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	080021ed 	.word	0x080021ed
 80021c0:	080021ed 	.word	0x080021ed
 80021c4:	080021f3 	.word	0x080021f3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	2101      	movs	r1, #1
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fb08 	bl	80027e4 <RCCEx_PLL2_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80021d8:	e00c      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3324      	adds	r3, #36	; 0x24
 80021de:	2101      	movs	r1, #1
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fbb1 	bl	8002948 <RCCEx_PLL3_Config>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80021ea:	e003      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
      break;
 80021f0:	e000      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80021f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002206:	492f      	ldr	r1, [pc, #188]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002208:	4313      	orrs	r3, r2
 800220a:	654b      	str	r3, [r1, #84]	; 0x54
 800220c:	e001      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d037      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	2b05      	cmp	r3, #5
 8002224:	d820      	bhi.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800226f 	.word	0x0800226f
 8002230:	08002245 	.word	0x08002245
 8002234:	08002257 	.word	0x08002257
 8002238:	0800226f 	.word	0x0800226f
 800223c:	0800226f 	.word	0x0800226f
 8002240:	0800226f 	.word	0x0800226f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f000 faca 	bl	80027e4 <RCCEx_PLL2_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002254:	e00c      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3324      	adds	r3, #36	; 0x24
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fb73 	bl	8002948 <RCCEx_PLL3_Config>
 8002262:	4603      	mov	r3, r0
 8002264:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002266:	e003      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]
      break;
 800226c:	e000      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800226e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	4910      	ldr	r1, [pc, #64]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	654b      	str	r3, [r1, #84]	; 0x54
 8002288:	e001      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d040      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d827      	bhi.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80022a4:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80022a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022aa:	bf00      	nop
 80022ac:	080022fb 	.word	0x080022fb
 80022b0:	080022d1 	.word	0x080022d1
 80022b4:	080022e3 	.word	0x080022e3
 80022b8:	080022fb 	.word	0x080022fb
 80022bc:	080022fb 	.word	0x080022fb
 80022c0:	080022fb 	.word	0x080022fb
 80022c4:	58024400 	.word	0x58024400
 80022c8:	58024800 	.word	0x58024800
 80022cc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3304      	adds	r3, #4
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fa84 	bl	80027e4 <RCCEx_PLL2_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80022e0:	e00c      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3324      	adds	r3, #36	; 0x24
 80022e6:	2101      	movs	r1, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fb2d 	bl	8002948 <RCCEx_PLL3_Config>
 80022ee:	4603      	mov	r3, r0
 80022f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80022f2:	e003      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	75fb      	strb	r3, [r7, #23]
      break;
 80022f8:	e000      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80022fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002302:	4bb2      	ldr	r3, [pc, #712]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	49ae      	ldr	r1, [pc, #696]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	658b      	str	r3, [r1, #88]	; 0x58
 8002316:	e001      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d044      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800232e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002332:	d01b      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002338:	d805      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d022      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800233e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002344:	e01b      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d01d      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800234c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002350:	d01c      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002356:	d01b      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002358:	e011      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fa3f 	bl	80027e4 <RCCEx_PLL2_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800236a:	e012      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3324      	adds	r3, #36	; 0x24
 8002370:	2102      	movs	r1, #2
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fae8 	bl	8002948 <RCCEx_PLL3_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800237c:	e009      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]
      break;
 8002382:	e006      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002384:	bf00      	nop
 8002386:	e004      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002388:	bf00      	nop
 800238a:	e002      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800238c:	bf00      	nop
 800238e:	e000      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002398:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a6:	4989      	ldr	r1, [pc, #548]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	654b      	str	r3, [r1, #84]	; 0x54
 80023ac:	e001      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d044      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c8:	d01b      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80023ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ce:	d805      	bhi.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d022      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80023da:	e01b      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80023dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e0:	d01d      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80023e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80023e6:	d01c      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80023e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023ec:	d01b      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80023ee:	e011      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f9f4 	bl	80027e4 <RCCEx_PLL2_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002400:	e012      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3324      	adds	r3, #36	; 0x24
 8002406:	2102      	movs	r1, #2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fa9d 	bl	8002948 <RCCEx_PLL3_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002412:	e009      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	75fb      	strb	r3, [r7, #23]
      break;
 8002418:	e006      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800241a:	bf00      	nop
 800241c:	e004      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800242e:	4b67      	ldr	r3, [pc, #412]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800243c:	4963      	ldr	r1, [pc, #396]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	658b      	str	r3, [r1, #88]	; 0x58
 8002442:	e001      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d044      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800245a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800245e:	d01b      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002464:	d805      	bhi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d022      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800246a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002470:	e01b      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002476:	d01d      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002478:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800247c:	d01c      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800247e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002482:	d01b      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002484:	e011      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f9a9 	bl	80027e4 <RCCEx_PLL2_Config>
 8002492:	4603      	mov	r3, r0
 8002494:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002496:	e012      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3324      	adds	r3, #36	; 0x24
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fa52 	bl	8002948 <RCCEx_PLL3_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80024a8:	e009      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
      break;
 80024ae:	e006      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80024b0:	bf00      	nop
 80024b2:	e004      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80024b4:	bf00      	nop
 80024b6:	e002      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80024bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024be:	7dfb      	ldrb	r3, [r7, #23]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024d2:	493e      	ldr	r1, [pc, #248]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	658b      	str	r3, [r1, #88]	; 0x58
 80024d8:	e001      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f4:	d10a      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3324      	adds	r3, #36	; 0x24
 80024fa:	2102      	movs	r1, #2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fa23 	bl	8002948 <RCCEx_PLL3_Config>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800251a:	492c      	ldr	r1, [pc, #176]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002536:	d10a      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3324      	adds	r3, #36	; 0x24
 800253c:	2102      	movs	r1, #2
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa02 	bl	8002948 <RCCEx_PLL3_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255c:	491b      	ldr	r1, [pc, #108]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d032      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d00d      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800257a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800257e:	d016      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f92a 	bl	80027e4 <RCCEx_PLL2_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002594:	e00c      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3324      	adds	r3, #36	; 0x24
 800259a:	2102      	movs	r1, #2
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f9d3 	bl	8002948 <RCCEx_PLL3_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80025a6:	e003      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	75fb      	strb	r3, [r7, #23]
      break;
 80025ac:	e000      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80025ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025c4:	4901      	ldr	r1, [pc, #4]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	658b      	str	r3, [r1, #88]	; 0x58
 80025ca:	e003      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80025cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02f      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ea:	d00c      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80025ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025f0:	d015      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f6:	d10f      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f8:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	4a78      	ldr	r2, [pc, #480]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002604:	e00c      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3324      	adds	r3, #36	; 0x24
 800260a:	2101      	movs	r1, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f99b 	bl	8002948 <RCCEx_PLL3_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002616:	e003      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
      break;
 800261c:	e000      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800261e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002626:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002634:	496a      	ldr	r1, [pc, #424]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	654b      	str	r3, [r1, #84]	; 0x54
 800263a:	e001      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d029      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d007      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800265a:	e00f      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800265c:	4b60      	ldr	r3, [pc, #384]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002668:	e00b      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3304      	adds	r3, #4
 800266e:	2102      	movs	r1, #2
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f8b7 	bl	80027e4 <RCCEx_PLL2_Config>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	75fb      	strb	r3, [r7, #23]
      break;
 8002680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002688:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	4952      	ldr	r1, [pc, #328]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	64cb      	str	r3, [r1, #76]	; 0x4c
 800269a:	e001      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	2102      	movs	r1, #2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f948 	bl	8002948 <RCCEx_PLL3_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d02f      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d6:	d00c      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80026d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026dc:	d802      	bhi.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d011      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80026e2:	e00d      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80026e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e8:	d00f      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80026ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ee:	d00e      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80026f0:	e006      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	4a3a      	ldr	r2, [pc, #232]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80026fe:	e007      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	75fb      	strb	r3, [r7, #23]
      break;
 8002704:	e004      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002706:	bf00      	nop
 8002708:	e002      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800270a:	bf00      	nop
 800270c:	e000      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800270e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002716:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002722:	492f      	ldr	r1, [pc, #188]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	654b      	str	r3, [r1, #84]	; 0x54
 8002728:	e001      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800273a:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800273c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4926      	ldr	r1, [pc, #152]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002758:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002766:	491e      	ldr	r1, [pc, #120]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800279c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027a0:	6113      	str	r3, [r2, #16]
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80027ac:	490c      	ldr	r1, [pc, #48]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	da08      	bge.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	4906      	ldr	r1, [pc, #24]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80027cc:	7dbb      	ldrb	r3, [r7, #22]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	58024400 	.word	0x58024400

080027e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d101      	bne.n	8002802 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e099      	b.n	8002936 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002802:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800280c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800280e:	f7fe f83f 	bl	8000890 <HAL_GetTick>
 8002812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002814:	e008      	b.n	8002828 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002816:	f7fe f83b 	bl	8000890 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e086      	b.n	8002936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002828:	4b45      	ldr	r3, [pc, #276]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002834:	4b42      	ldr	r3, [pc, #264]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	031b      	lsls	r3, r3, #12
 8002842:	493f      	ldr	r1, [pc, #252]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002844:	4313      	orrs	r3, r2
 8002846:	628b      	str	r3, [r1, #40]	; 0x28
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	3b01      	subs	r3, #1
 800284e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	3b01      	subs	r3, #1
 8002858:	025b      	lsls	r3, r3, #9
 800285a:	b29b      	uxth	r3, r3
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	3b01      	subs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	3b01      	subs	r3, #1
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002878:	4931      	ldr	r1, [pc, #196]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 800287a:	4313      	orrs	r3, r2
 800287c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800287e:	4b30      	ldr	r3, [pc, #192]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	492d      	ldr	r1, [pc, #180]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 800288c:	4313      	orrs	r3, r2
 800288e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f023 0220 	bic.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4928      	ldr	r1, [pc, #160]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80028a2:	4b27      	ldr	r3, [pc, #156]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028a8:	f023 0310 	bic.w	r3, r3, #16
 80028ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <RCCEx_PLL2_Config+0x160>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	69d2      	ldr	r2, [r2, #28]
 80028ba:	00d2      	lsls	r2, r2, #3
 80028bc:	4920      	ldr	r1, [pc, #128]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d106      	bne.n	80028e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028e0:	e00f      	b.n	8002902 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028f4:	e005      	b.n	8002902 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	4a11      	ldr	r2, [pc, #68]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 80028fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 8002908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800290c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290e:	f7fd ffbf 	bl	8000890 <HAL_GetTick>
 8002912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002914:	e008      	b.n	8002928 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002916:	f7fd ffbb 	bl	8000890 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e006      	b.n	8002936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <RCCEx_PLL2_Config+0x15c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	58024400 	.word	0x58024400
 8002944:	ffff0007 	.word	0xffff0007

08002948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b03      	cmp	r3, #3
 8002960:	d101      	bne.n	8002966 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e099      	b.n	8002a9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002966:	4b4f      	ldr	r3, [pc, #316]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4e      	ldr	r2, [pc, #312]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002972:	f7fd ff8d 	bl	8000890 <HAL_GetTick>
 8002976:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002978:	e008      	b.n	800298c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800297a:	f7fd ff89 	bl	8000890 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e086      	b.n	8002a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800298c:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002998:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	493f      	ldr	r1, [pc, #252]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	628b      	str	r3, [r1, #40]	; 0x28
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	025b      	lsls	r3, r3, #9
 80029be:	b29b      	uxth	r3, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	061b      	lsls	r3, r3, #24
 80029d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80029dc:	4931      	ldr	r1, [pc, #196]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80029e2:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	492d      	ldr	r1, [pc, #180]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80029f4:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4928      	ldr	r1, [pc, #160]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <RCCEx_PLL3_Config+0x160>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	69d2      	ldr	r2, [r2, #28]
 8002a1e:	00d2      	lsls	r2, r2, #3
 8002a20:	4920      	ldr	r1, [pc, #128]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002a26:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d106      	bne.n	8002a46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002a44:	e00f      	b.n	8002a66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002a58:	e005      	b.n	8002a66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a72:	f7fd ff0d 	bl	8000890 <HAL_GetTick>
 8002a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002a7a:	f7fd ff09 	bl	8000890 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e006      	b.n	8002a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <RCCEx_PLL3_Config+0x15c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	ffff0007 	.word	0xffff0007

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4e0d      	ldr	r6, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1ba4      	subs	r4, r4, r6
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	42a5      	cmp	r5, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4e0b      	ldr	r6, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 f820 	bl	8002b04 <_init>
 8002ac4:	1ba4      	subs	r4, r4, r6
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2500      	movs	r5, #0
 8002aca:	42a5      	cmp	r5, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad4:	4798      	blx	r3
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ade:	4798      	blx	r3
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002b2c 	.word	0x08002b2c
 8002ae8:	08002b2c 	.word	0x08002b2c
 8002aec:	08002b2c 	.word	0x08002b2c
 8002af0:	08002b30 	.word	0x08002b30

08002af4 <memset>:
 8002af4:	4402      	add	r2, r0
 8002af6:	4603      	mov	r3, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
